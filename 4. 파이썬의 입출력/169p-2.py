# 함수 안에서 함수 밖의 변수를 바꾸는 방법

a = 1
def vartest():
    global a # global: 전역 변수에 접근함을 선언하는 키워드.
    a = a + 1 # 전역 변수 {a}에 직접 접근하여 함수 밖에 영향을 행사할 수 있다.

vartest()
print(a)

# 함수는 가능하면 외부 변수에 종속되지 않고, 독립성을 유지하는 것이 좋다. 이유는 다음과 같다.
# 1. 전역 변수는 프로그램의 어디에서나 수정이 가능하기 때문에, 특정 값이 언제, 어디에서, 왜 변했는지 추적이 어렵다.
#    따라서, 함수의 동작이 외부와 연결되어 예측하기 어려워진다.
# 2. 복잡한 프로그램의 전역 변수는 여러 곳에서 수정된다. 따라서, 전역 변수가 만드는 버그는 디버깅이 어렵다.
#    같은 이유로 함수가 전역 변수에 직접 접근하여 수정하면 디버깅이 어려워진다.
# 3. 함수가 외부에 종속될 경우, 함수를 독립적으로 테스트할 수 없고, 함수 외부까지 같이 테스트해야 한다.
#    특히, 전역 변수에 직접 접근하는 함수가 더 있을 경우, 이 함수들까지 같이 테스트해야 한다.
# 4. 멀티스레드 환경일 경우, 여러 스레드가 동시에 전역 변수에 접근할 수 있으므로, 스레드 간의 동기화 문제를 일으킬 수 있다.
# 5. 코드 재사용이나 모듈화를 방해한다. 가령, 특정 함수를 재사용하기 위해선,
#    해당 함수가 접근하는 전역 변수와 그 전역 변수를 수정하는 다른 함수들도 같이 고려해야 한다.
# 따라서, global은 되도록 사용하지 않는 것이 좋다.